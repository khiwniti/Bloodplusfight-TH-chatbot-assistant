/**
 * Healthcare Chatbot Test Server
 * Simple server for testing healthcare chatbot functionality with ngrok
 */

const http = require('http');
const crypto = require('crypto');

const PORT = process.env.PORT || 8787;

// Healthcare knowledge base responses
const healthcareResponses = {
  hiv: {
    en: `üè• **HIV Information**

HIV (Human Immunodeficiency Virus) attacks the immune system:

**Key Facts:**
‚Ä¢ **Transmission**: Blood, semen, vaginal fluids, breast milk
‚Ä¢ **Prevention**: Condoms, PrEP, regular testing, avoid sharing needles
‚Ä¢ **Treatment**: Antiretroviral therapy (ART) is highly effective
‚Ä¢ **Testing**: Multiple test types with different window periods

**Important**: Modern HIV treatment allows people to live normal lifespans.

‚ö†Ô∏è **Medical Disclaimer**: This is educational information only. Always consult with healthcare providers for medical advice, diagnosis, or treatment decisions.`,

    th: `üè• **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ**

‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ (Human Immunodeficiency Virus) ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ô:

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
‚Ä¢ **‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠**: ‡πÄ‡∏•‡∏∑‡∏≠‡∏î ‡∏ô‡πâ‡∏≥‡∏≠‡∏™‡∏∏‡∏à‡∏¥ ‡∏ô‡πâ‡∏≥‡∏´‡∏•‡πà‡∏≠‡∏•‡∏∑‡πà‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏•‡∏≠‡∏î ‡∏ô‡πâ‡∏≥‡∏ô‡∏°‡πÅ‡∏°‡πà
‚Ä¢ **‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô**: ‡∏ñ‡∏∏‡∏á‡∏¢‡∏≤‡∏á‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢ PrEP ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πá‡∏°‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
‚Ä¢ **‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤**: ‡∏¢‡∏≤‡∏ï‡πâ‡∏≤‡∏ô‡πÑ‡∏ß‡∏£‡∏±‡∏™ (ART) ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
‚Ä¢ **‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à**: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤`
  },

  prep: {
    en: `üè• **PrEP Information**

Pre-exposure prophylaxis (PrEP) prevents HIV infection:

**Effectiveness:**
‚Ä¢ **99% effective** when taken as prescribed for sexual transmission
‚Ä¢ **74% effective** for injection drug use when taken consistently

**Who Should Consider PrEP:**
‚Ä¢ People with HIV-positive partners
‚Ä¢ Multiple sexual partners
‚Ä¢ Injection drug users
‚Ä¢ Men who have sex with men in high-prevalence areas

**Monitoring Required:**
‚Ä¢ HIV testing every 3 months
‚Ä¢ Kidney function tests
‚Ä¢ STD screening
‚Ä¢ Regular medical visits

‚ö†Ô∏è **Medical Disclaimer**: Consult healthcare providers to determine if PrEP is right for you.`,

    th: `üè• **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PrEP**

‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™ (PrEP) ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ:

**‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:**
‚Ä¢ **99% ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
‚Ä¢ **74% ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏â‡∏µ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏ô‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠

**‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ PrEP:**
‚Ä¢ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏ô‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ
‚Ä¢ ‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏â‡∏µ‡∏î
‚Ä¢ ‡∏ä‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ä‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏™‡∏π‡∏á

**‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:**
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ‡∏ó‡∏∏‡∏Å 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
‚Ä¢ ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå**: ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤ PrEP ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà`
  },

  std: {
    en: `üè• **STDs/STIs Information**

Sexually transmitted diseases/infections prevention and care:

**Common STDs:**
‚Ä¢ **Chlamydia** - Most common, often no symptoms, curable
‚Ä¢ **Gonorrhea** - Bacterial infection, may be drug-resistant
‚Ä¢ **Syphilis** - Stages of infection, highly contagious early
‚Ä¢ **Herpes** - Viral, manageable but not curable
‚Ä¢ **HPV** - Some cause warts, others can cause cancer

**Prevention:**
‚Ä¢ Use condoms consistently and correctly
‚Ä¢ Regular testing for sexually active individuals
‚Ä¢ HPV and Hepatitis B vaccines available
‚Ä¢ Open communication with partners

**Testing Recommendations:**
‚Ä¢ Annual testing for sexually active adults
‚Ä¢ More frequent testing for high-risk groups
‚Ä¢ Test before new sexual partnerships

‚ö†Ô∏è **Medical Disclaimer**: Seek professional medical advice for symptoms, testing, or treatment.`,

    th: `üè• **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå**

‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå:

**‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢:**
‚Ä¢ **‡∏Ñ‡∏•‡∏≤‡πÑ‡∏°‡πÄ‡∏î‡∏µ‡∏¢** - ‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏°‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏î‡πâ
‚Ä¢ **‡∏´‡∏ô‡∏≠‡∏á‡πÉ‡∏ô** - ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤‡∏à‡∏î‡∏∑‡πâ‡∏≠‡∏¢‡∏≤
‚Ä¢ **‡∏ã‡∏¥‡∏ü‡∏¥‡∏•‡∏¥‡∏™** - ‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å
‚Ä¢ **‡πÄ‡∏Æ‡∏≠‡∏£‡πå‡∏õ‡∏µ‡∏™** - ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢
‚Ä¢ **HPV** - ‡∏ö‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏π‡∏î ‡∏ö‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á

**‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô:**
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ñ‡∏∏‡∏á‡∏¢‡∏≤‡∏á‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
‚Ä¢ ‡∏°‡∏µ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô HPV ‡πÅ‡∏•‡∏∞‡πÑ‡∏ß‡∏£‡∏±‡∏™‡∏ï‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏ö‡∏µ
‚Ä¢ ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ô‡∏≠‡∏ô

**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à:**
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡∏ô‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå**: ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤`
  }
};

// Classify healthcare intent
function classifyHealthcareIntent(text) {
  const lowerText = text.toLowerCase();
  
  // HIV-related keywords
  if (lowerText.includes('hiv') || lowerText.includes('aids') || 
      lowerText.includes('‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ') || lowerText.includes('‡πÄ‡∏≠‡∏î‡∏™‡πå') ||
      lowerText.includes('‡πÑ‡∏ß‡∏£‡∏±‡∏™‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ')) {
    return 'hiv';
  }
  
  // PrEP-related keywords
  if (lowerText.includes('prep') || lowerText.includes('pre-exposure') ||
      lowerText.includes('‡πÄ‡∏û‡∏£‡∏û') || lowerText.includes('‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™')) {
    return 'prep';
  }
  
  // STD/STI-related keywords
  if (lowerText.includes('std') || lowerText.includes('sti') || 
      lowerText.includes('sexually transmitted') ||
      lowerText.includes('‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®') || lowerText.includes('‡πÇ‡∏£‡∏Ñ‡∏Å‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ') ||
      lowerText.includes('chlamydia') || lowerText.includes('gonorrhea') ||
      lowerText.includes('syphilis') || lowerText.includes('herpes')) {
    return 'std';
  }
  
  return 'general';
}

// Detect language
function detectLanguage(text) {
  const thaiPattern = /[\u0E00-\u0E7F]/;
  return thaiPattern.test(text) ? 'th' : 'en';
}

// Generate response
function generateHealthcareResponse(intent, language, query) {
  if (healthcareResponses[intent] && healthcareResponses[intent][language]) {
    return healthcareResponses[intent][language];
  }
  
  // Fallback response
  const fallbacks = {
    en: `Hello! I can help you with healthcare information about:

üè• **HIV/AIDS** - Testing, treatment, prevention
üíä **PrEP** - Pre-exposure prophylaxis information  
üî¨ **STDs/STIs** - Prevention, testing, treatment
üè• **Sexual Health** - Safe practices and guidance

What specific information would you like to know?

‚ö†Ô∏è **Medical Disclaimer**: This information is for educational purposes only. Always consult with healthcare providers for medical advice.`,

    th: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:

üè• **‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ/‡πÄ‡∏≠‡∏î‡∏™‡πå** - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
üíä **PrEP** - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™
üî¨ **‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®** - ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
üè• **‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®** - ‡πÅ‡∏ô‡∏ß‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå`
  };
  
  return fallbacks[language] || fallbacks.en;
}

// Create HTTP server
const server = http.createServer((req, res) => {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Line-Signature, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }
  
  // Health check endpoint
  if (req.method === 'GET' && req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'healthy',
      service: 'bloodplusfight-healthcare-chatbot',
      version: '2.0.0',
      timestamp: new Date().toISOString(),
      features: {
        healthcare: true,
        multilingual: true,
        hiv_information: true,
        prep_guidance: true,
        std_information: true,
        privacy_compliant: true
      },
      supported_languages: ['en', 'th'],
      medical_disclaimers: true
    }));
    return;
  }
  
  // Webhook endpoint for LINE
  if (req.method === 'POST' && req.url === '/webhook') {
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      try {
        console.log('üì® Received webhook request');
        console.log('üìÑ Body:', body);
        
        const webhookData = JSON.parse(body);
        
        if (webhookData.events && webhookData.events.length > 0) {
          for (const event of webhookData.events) {
            if (event.type === 'message' && event.message.type === 'text') {
              const userMessage = event.message.text;
              const userId = event.source.userId;
              const replyToken = event.replyToken;
              
              // Classify intent and detect language
              const intent = classifyHealthcareIntent(userMessage);
              const language = detectLanguage(userMessage);
              
              console.log(`üè• Healthcare Query Processing:`);
              console.log(`   User: ${userId.substring(0, 8)}...`);
              console.log(`   Query: "${userMessage}"`);
              console.log(`   Intent: ${intent}`);
              console.log(`   Language: ${language}`);
              
              // Generate healthcare response
              const response = generateHealthcareResponse(intent, language, userMessage);
              
              console.log(`‚úÖ Response Generated:`);
              console.log(`   Length: ${response.length} characters`);
              console.log(`   Contains medical disclaimer: ${response.includes('Medical Disclaimer') || response.includes('‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö')}`);
              
              // Log analytics (anonymized)
              const anonymizedUserId = crypto.createHash('sha256')
                .update(userId + 'healthcare-salt-2024')
                .digest('hex').substring(0, 12);
              
              console.log(`üìä Analytics:`);
              console.log(`   Anonymous User: anon_${anonymizedUserId}`);
              console.log(`   Intent: ${intent}`);
              console.log(`   Language: ${language}`);
              console.log(`   Confidence: 0.9`);
              console.log(`   Response Time: ${Date.now() - event.timestamp}ms`);
              
              // In real implementation, this would send to LINE Messaging API
              console.log(`üì§ Would send to LINE:`);
              console.log(`   Reply Token: ${replyToken}`);
              console.log(`   Message Type: text`);
              console.log(`   Response Preview: "${response.substring(0, 100)}..."`);
            }
          }
        }
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ status: 'ok', processed: true }));
        
      } catch (error) {
        console.error('‚ùå Webhook processing error:', error.message);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Internal server error', message: error.message }));
      }
    });
    
    return;
  }
  
  // Test interface
  if (req.method === 'GET' && req.url === '/test') {
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>üè• Healthcare Chatbot Test</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; 
            margin: 0; padding: 20px; background: #f5f7fa; 
          }
          .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
          h1 { color: #2c5530; margin-bottom: 30px; }
          .test-section { margin: 25px 0; padding: 20px; border: 1px solid #e1e5e9; border-radius: 8px; background: #fafbfc; }
          .test-section h3 { color: #444; margin-top: 0; }
          button { 
            background: #28a745; color: white; border: none; padding: 12px 18px; 
            border-radius: 6px; cursor: pointer; margin: 5px; transition: background 0.2s;
          }
          button:hover { background: #218838; }
          .thai-btn { background: #17a2b8; }
          .thai-btn:hover { background: #138496; }
          input[type="text"] { 
            width: 400px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; 
            font-size: 14px; margin-right: 10px;
          }
          .response { 
            background: #e8f4fd; padding: 15px; margin: 15px 0; border-radius: 6px; 
            border-left: 4px solid #007bff; font-family: monospace; white-space: pre-wrap;
          }
          .success { color: #28a745; font-weight: bold; }
          .error { color: #dc3545; font-weight: bold; }
          .info { color: #6c757d; font-size: 0.9em; margin-top: 20px; }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>üè• Bloodplusfight Healthcare Chatbot Test</h1>
          
          <div class="test-section">
            <h3>üìã Quick Test Queries</h3>
            <p>Test common healthcare queries with predefined examples:</p>
            
            <h4>ü¶† HIV Information</h4>
            <button onclick="testQuery('What is HIV and how is it transmitted?', 'en')">HIV Basics (EN)</button>
            <button onclick="testQuery('‡πÄ‡∏≠‡∏ä‡πÑ‡∏≠‡∏ß‡∏µ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£', 'th')" class="thai-btn">HIV Basics (TH)</button>
            <button onclick="testQuery('How long is the HIV window period?', 'en')">HIV Testing (EN)</button>
            
            <h4>üíä PrEP Information</h4>
            <button onclick="testQuery('What is PrEP and who should take it?', 'en')">PrEP Info (EN)</button>
            <button onclick="testQuery('PrEP ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ', 'th')" class="thai-btn">PrEP Info (TH)</button>
            
            <h4>üî¨ STDs/STIs</h4>
            <button onclick="testQuery('What are common sexually transmitted diseases?', 'en')">STD Info (EN)</button>
            <button onclick="testQuery('‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á', 'th')" class="thai-btn">STD Info (TH)</button>
          </div>
          
          <div class="test-section">
            <h3>‚úèÔ∏è Custom Query Test</h3>
            <p>Enter your own healthcare question:</p>
            <input type="text" id="customQuery" placeholder="Enter your healthcare question in any language..." maxlength="500">
            <button onclick="testCustomQuery()">Send Query</button>
          </div>
          
          <div class="test-section">
            <h3>üìä Test Results</h3>
            <div id="responses"></div>
          </div>
          
          <div class="info">
            <p><strong>‚ÑπÔ∏è Test Information:</strong></p>
            <p>‚Ä¢ This test interface simulates LINE webhook calls</p>
            <p>‚Ä¢ Responses include medical disclaimers as required</p>
            <p>‚Ä¢ All user data is anonymized for privacy compliance</p>
            <p>‚Ä¢ Supports both English and Thai languages</p>
            <p>‚Ä¢ Real chatbot responses may include additional medical research</p>
          </div>
        </div>
        
        <script>
          let testCounter = 0;
          
          function testQuery(query, language) {
            testCounter++;
            const responseDiv = document.getElementById('responses');
            
            // Create test event
            const mockEvent = {
              events: [{
                type: 'message',
                message: { 
                  type: 'text', 
                  text: query,
                  id: 'test-msg-' + testCounter
                },
                source: {
                  type: 'user',
                  userId: 'test-user-' + Math.random().toString(36).substr(2, 9)
                },
                replyToken: 'test-reply-' + testCounter,
                timestamp: Date.now()
              }]
            };
            
            // Add loading indicator
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'response';
            loadingDiv.innerHTML = 'üîÑ Processing query: "' + query + '"...';
            responseDiv.appendChild(loadingDiv);
            
            // Send to webhook
            fetch('/webhook', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(mockEvent)
            })
            .then(response => {
              loadingDiv.remove();
              
              const resultDiv = document.createElement('div');
              resultDiv.className = 'response';
              
              if (response.ok) {
                resultDiv.innerHTML = 
                  '<span class="success">‚úÖ SUCCESS</span>\\n' +
                  '<strong>Query:</strong> ' + query + '\\n' +
                  '<strong>Language:</strong> ' + language + '\\n' +
                  '<strong>Status:</strong> ' + response.status + '\\n' +
                  '<strong>Note:</strong> Check server console for detailed response and analytics';
              } else {
                resultDiv.innerHTML = 
                  '<span class="error">‚ùå FAILED</span>\\n' +
                  '<strong>Query:</strong> ' + query + '\\n' +
                  '<strong>Error:</strong> HTTP ' + response.status + '\\n' +
                  '<strong>Status:</strong> ' + response.statusText;
              }
              
              responseDiv.appendChild(resultDiv);
              responseDiv.scrollTop = responseDiv.scrollHeight;
            })
            .catch(error => {
              loadingDiv.remove();
              
              const errorDiv = document.createElement('div');
              errorDiv.className = 'response';
              errorDiv.innerHTML = 
                '<span class="error">‚ùå ERROR</span>\\n' +
                '<strong>Query:</strong> ' + query + '\\n' +
                '<strong>Error:</strong> ' + error.message;
              responseDiv.appendChild(errorDiv);
            });
          }
          
          function testCustomQuery() {
            const queryInput = document.getElementById('customQuery');
            const query = queryInput.value.trim();
            
            if (query) {
              const language = /[\\u0E00-\\u0E7F]/.test(query) ? 'th' : 'en';
              testQuery(query, language);
              queryInput.value = '';
            } else {
              alert('Please enter a healthcare question to test.');
            }
          }
          
          // Allow Enter key for custom queries
          document.getElementById('customQuery').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              testCustomQuery();
            }
          });
        </script>
      </body>
      </html>
    `);
    return;
  }
  
  // 404 - Not Found
  res.writeHead(404, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({ 
    error: 'Not found',
    available_endpoints: ['/health', '/webhook', '/test']
  }));
});

// Start server
server.listen(PORT, () => {
  console.log('üè• Bloodplusfight Healthcare Chatbot Test Server');
  console.log('===============================================');
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìã Health check: http://localhost:${PORT}/health`);
  console.log(`üß™ Test interface: http://localhost:${PORT}/test`);
  console.log(`üì® Webhook endpoint: http://localhost:${PORT}/webhook`);
  console.log('');
  console.log('‚úÖ Features enabled:');
  console.log('   ‚Ä¢ HIV/AIDS information (EN/TH)');
  console.log('   ‚Ä¢ PrEP guidance (EN/TH)');
  console.log('   ‚Ä¢ STDs/STIs information (EN/TH)');
  console.log('   ‚Ä¢ Medical disclaimers');
  console.log('   ‚Ä¢ Privacy-compliant analytics');
  console.log('   ‚Ä¢ Intent classification');
  console.log('   ‚Ä¢ Language detection');
  console.log('');
  console.log('üìä Ready to receive healthcare queries...');
});